/*
 * Copyright Richard Todd. I put the code under the
 * GPL v2.0.  See the LICENSE file in the repository.
 * for more information.
 */
package com.waywardcode.palette;

import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;
import javafx.event.ActionEvent;
import javafx.scene.control.ComboBox;
import javafx.fxml.*;
import javafx.scene.control.TextField;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.control.ColorPicker;

/**
 * PaletteDesigner is a custom control to design indexed color palettes.
 *
 * @author richard todd
 */
public class PaletteDesigner extends VBox {
    @FXML private ComboBox<ColorAdder> vintageList;
    @FXML private ColorPicker scaleFrom, scaleTo;
    @FXML private TextField scaleLvl;
    @FXML private Pane colorDisplay;
        
    private Palette palette;
    

    /**
     * Initializes the control.
     */
    public PaletteDesigner() {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/PaletteDesigner.fxml"));
        loader.setRoot(this);
        loader.setController(this);
        palette = new Palette();
        
        try {
            loader.load();
        } catch(java.io.IOException ex) {
            throw new RuntimeException(ex);
        }
        
        //scaleFrom.setValue(Color.BLACK);
        //scaleTo.setValue(Color.WHITE);      
        // Create the vintage palette list...
        for (VintagePalette vp : VintagePalette.values()) {
            vintageList.getItems().add(new ColorAdder(vp.toString(), vp::getColors));
        }

    }        
    
    
    
    /**
     * Set the palette name and color set. Any existing colors will be cleared.
     * @param name  The optional name of the color set.
     * @param colors The colors to be used as a palette.
     */
    public void setPalette(Optional<String> name, Color[] colors) {
        palette.clear();
        palette.addPalette(name, colors);
        redrawColors();
    }
    
    /**
     * Get the name of the palette generated by the control.
     * @return the palette name.
     */
    public String getPaletteName() {
        return palette.toString();
    }
    
    /**
     * Get the colors generated by the tool.  The colors will be
     * made unique, and at most 256 will be returned.
     * @return 
     */
    public Color[] getPaletteColors() {
         return palette.toUniqueArray();  
    }

    @FXML private void clearPalette(ActionEvent ae) {
        palette.clear();
        redrawColors();
    }
    
    @FXML private void dedupPalette(ActionEvent ae) {
        palette.removeDuplicates();
        redrawColors();
    }
    
    @FXML private void addVintage(ActionEvent ae) {
        final ColorAdder ca = vintageList.getValue();
        palette.addPalette(Optional.of(ca.toString()), ca.get());
        redrawColors();
    }
    
    @FXML private void addScale(ActionEvent ae) {
        final int levels = Integer.valueOf(scaleLvl.getText());
        if(levels <= 1) return;
        
        final Color from = scaleFrom.getValue();
        final Color to = scaleTo.getValue();
        final Color[] cols = new Color[levels];
        
        for (int i = 0; i < levels; i++) {
            cols[i] = from.interpolate(to, ((double)i)/(levels-1));
        }
        palette.addPalette(Optional.of("Color Scale"), cols);
        redrawColors();
    }
    
    private void redrawColors() {
        colorDisplay.getChildren().clear();
        palette.stream()
               .forEach((c) -> colorDisplay.getChildren().add(new Rectangle(20,20,c)));
    }

    
}
